import { Assets } from "assets.slint";
import { Theme } from "theme.slint";
import { Card, ParameterCard, CircularGauge, PowerGauge, CheckBox, LightIntensityCard, WeatherCard, DateCard } from "widgets.slint";
import { ListView, ScrollView } from "std-widgets.slint";

import "../assets/fonts/CodecPro-Regular.ttf";

export component AppWindow inherits Window {
    title: "Smart Home Dashboard - Koaley Group";
    width: 1020px;
    height: 720px;
    background: Theme.palette.blue-pink-gradient;
    icon: Assets.logo;
    default-font-family: "Codec Pro";

    // 
    in property <[{label: string, icon: string}]> home-locations: [
        {
            label: "Kitchen",
            icon: Assets.kitchen
        },
        {
            label: "Bedroom",
            icon: Assets.bedroom
        },
        {
            label: "Living Area",
            icon: Assets.livingArea
        },
        {
            label: "Office",
            icon: Assets.office
        }
    ];
    in-out property <int> current-location-index: 0;

    // Date Card Properties & Callbacks
    in property <string> date <=> date-card.date;
    in property <string> dayOfWeek <=> date_card.dayOfWeek;
    in property <string> time <=> date_card.time;
    in property <bool> is-am <=> date_card.is-am; // Is AM or PM
    callback update-current-datetime <=> date_card.update-current-datetime;

    // Force the current index item is in view of the scrollview box
    changed current-location-index => { sv.make_active_tab_visible(); }

    HorizontalLayout {
        padding: 70px;
        spacing: Theme.dimensions.spacing;

        VerticalLayout {
            width: 390px;
            spacing: 16px;

            date_card := DateCard {
                vertical-stretch: 0.4;
            }

            WeatherCard { 
                vertical-stretch: 0.35;
            }

            Card {
                vertical-stretch: 0.25;
                clip: true;

                indicator := Rectangle {
                    x: calculateX(root.current-location-index);
                    y: 115px;
                    height: 4px;
                    width: 100px;
                    border-radius: self.height/2;
                    background: Theme.palette.progress-foreground;

                    animate x { duration: 200ms; easing: ease-in-out-bounce;}

                    pure function calculateX(ind: int) -> length {
                        return 24px + ((ind - 1) * 8px) + ind * 100px + sv.viewport-x;
                    }
                }
                
                sv := ScrollView {
                    padding: 8px;

                    function make_active_tab_visible() {
                        // property<length> x: 0;

                        // if sv.viewport-x
                    }
                    
                    HorizontalLayout {
                        padding: 16px;
                        spacing: 8px;

                        for location[ind] in root.home-locations: Rectangle {
                            width: 100px;
                            opacity: (10 - ind)/10;                            

                            property <bool> active: ind == root.current-location-index;

                            TouchArea {
                                clicked => { root.current-location-index = ind; }
                            }

                            VerticalLayout {
                                spacing: 8px;
                                padding: 8px;

                                Path {
                                    commands: location.icon;
                                    fill: active ? Theme.palette.progress-foreground : Theme.palette.text-primary;

                                    animate fill { duration: 200ms; easing: ease-in-out-quad;}
                                }

                                Text {
                                    text: location.label;
                                    font-size: Theme.textSize.small;
                                    color: active ? Theme.palette.progress-foreground : Theme.palette.text-primary;
                                    horizontal-alignment: center;

                                    animate color { duration: 200ms; easing: ease-in-out-quad;}
                                }
                            }
                        }
                    }
                }
            }
        }

        VerticalLayout {
            width: 160px;
            spacing: 8px;
            ParameterCard {
                label: "Temperature";
                value: 25.4;
                units: "ºC";
            }

            ParameterCard {
                label: "Humidity";
                value: 56;
                units: "%";
            }

            ParameterCard {
                label: "Heating";
                value: 35;
                units: "ºC";
            }

            ParameterCard {
                label: "Water";
                value: 234;
                units: "kpa";
            }
        }

        VerticalLayout {
            spacing: 16px;

            Card {
                height: self.width;

                // Display power circular progress bar
                PowerGauge {
                    width: parent.width;
                    height: parent.height;
                }
            }

            Card { 
                VerticalLayout {
                    padding: 16px;
                    spacing: 8px;

                    for item[index] in [
                        {label: "Windows", checked: false},
                        {label: "Blinders", checked: false},
                        {label: "Curtains", checked: false}
                    ]: HorizontalLayout {
                        Text {
                            text: item.label;
                            font-size: Theme.textSize.defaut;
                            color: Theme.palette.text-primary;
                        }

                        CheckBox {
                            
                        }
                    }
                }
            }

            LightIntensityCard { }
        }
    }
}
