import { Theme } from "theme.slint";

export component Card inherits Rectangle {
    background: Theme.palette.card-background.with-alpha(0.7);
    border-radius: Theme.dimensions.card-border-radius;
    min-height: 50px;
    min-width: 50px;

    @children
}

export component ParameterCard inherits Card {
    in property <float> value: 234;
    in property <string> units: "kpa";
    in property <string> label: "Temperature";

    VerticalLayout {
        spacing: 0px;
        padding: 16px;

        Text {
            font-size: Theme.textSize.small;
            color: Theme.palette.text-primary;
            text: root.label;
            width: parent.width - 32px;
            font-weight: 500;
        }

        HorizontalLayout {
            Rectangle {
                horizontal-stretch: 1;
            }

            VerticalLayout {
                Rectangle {}

                HorizontalLayout {
                label-text := Text {
                    font-size: Theme.textSize.large;
                    color: Theme.palette.text-primary;
                    text: root.value;
                    horizontal-stretch: 0;
                    vertical-stretch: 0;
                    font-weight: 500;
                    vertical-alignment: bottom;
                }
    
                Text {
                    text: root.units;
                    font-size: Theme.textSize.small;
                    color: Theme.palette.text-primary;
                    horizontal-stretch: 0;
                    vertical-stretch: 0;
                    font-weight: 400;
                    // y: label-text.y;
                }
            }

                Rectangle {}
            }

            

            Rectangle {
                horizontal-stretch: 1;
            }
        }
    }
}

export component CircularGauge {
    width: size;
    height: size;

    in property <length> thickness: 20px;
    in property <float> progress: 0.5;
    in property <float> start: 0;
    in property <length> size: 300px;

    // Color scheme
    in property <color> gauge-background: Theme.palette.progress-background;
    in property <color> gauge-foreground: Theme.palette.progress-foreground;
    in property <color> text-color: Theme.palette.text-primary;

    property <float> inner-radius: root.radius - root.thickness/1px;
    property <float> radius: root.size/2px;

    // Circular gauge background
    Rectangle {
        width: root.size;
        height: root.size;
        border-color: root.gauge-background;
        border-radius: self.height/2;
        border-width: root.thickness;

        Path {
            viewbox-width: parent.width/1px;
            viewbox-height: parent.height/1px;
            stroke: root.gauge-foreground;
            fill: root.gauge-foreground;

            MoveTo {
                y: root.radius - root.radius * cos(-root.start * 360deg);
                x: root.radius - root.radius * sin(-root.start * 360deg);
            }

            ArcTo {
                radius-x: root.thickness/2px;
                radius-y: root.thickness/2px;        
                y: root.radius - root.inner-radius * cos(-root.start * 360deg);
                x: root.radius - root.inner-radius * sin(-root.start * 360deg);
            }

            ArcTo {
                radius-x: root.inner-radius;
                radius-y: root.inner-radius;
                y: root.radius - root.inner-radius*cos(-(root.start + root.progress) * 360deg);
                x: root.radius - root.inner-radius*sin(-(root.start + root.progress) * 360deg);
                sweep: root.progress > 0;
                large-arc: root.progress > 0.5;
            }

            ArcTo {
                radius-x: root.thickness/2px;
                radius-y: root.thickness/2px;    
                y: root.radius - root.radius*cos(-(root.start + root.progress) * 360deg);
                x: root.radius - root.radius*sin(-(root.start + root.progress) * 360deg);
            }

            ArcTo {
                radius-x: root.radius;
                radius-y: root.radius;
                y: root.radius - root.radius * cos(-root.start * 360deg);
                x: root.radius - root.radius * sin(-root.start * 360deg);
                sweep: root.progress < 0;
                large-arc: root.progress > 0.5;
            }

            LineTo {
                y: root.radius - root.radius * cos(-root.start * 360deg);
                x: root.radius - root.radius * sin(-root.start * 360deg);
            }
        }

        @children
    }
}

export component PowerGauge {

    CircularGauge {
        size: parent.height * 0.8;
        thickness: 18px;

        HorizontalLayout {
            Rectangle { }

            VerticalLayout {
                spacing: -10px;
                Rectangle { }

                Text {
                    font-size: Theme.textSize.defaut;
                    text: "Power";
                    horizontal-alignment: txt.preferred-width > 50px ? left : center;
                }

                txt := Text {
                // min-width: 100px;
                font-size: Theme.textSize.large;
                    text: "2,834";
                    vertical-stretch: 0;
                    horizontal-alignment: center;
                }

                Text {
                    font-size: Theme.textSize.defaut;
                    text: "kW";
                    horizontal-alignment: txt.preferred-width > 50px ? right : center;
                }

                Rectangle { }
            }

            Rectangle { }
        }
    }
}

export component CheckBox inherits Rectangle {
    border-radius: self.height/2;
    height: 24px;
    width: self.height * 2;
    background: Theme.palette.progress-background;

    // Callback to propagate the state changed
    in-out property <bool> checked: false;

    indicator := Rectangle {
        height: root.height - 4px;
        width: root.height - 4px;
        border-radius: self.height/2;
        background: root.checked ? white : Theme.palette.progress-foreground;
        x: root.checked ? root.width - self.width - 2px : 2px;

        animate x { duration: 200ms; easing: ease-in-out-quad;}
        animate background { duration: 200ms; easing: ease-in-out-quad;}
    }

    // 
    ta := TouchArea {
        clicked => { root.checked = !root.checked; }
    }
}

export component ProgressBar inherits Rectangle {
    height: 24px;
    background: #494F56;
    border-radius: self.height/2;

    in property <float> progress: 0;

    indicator := Rectangle {
        x: 0;
        height: root.height;
        width: root.width * Math.clamp(root.progress, 0, 1);
        border-radius: self.height/2;
        background: Theme.palette.progress-foreground;

        animate width { duration: 1000ms; easing: ease-in-out-quad;}
    }
}

export component LightIntensityCard inherits Card {
    in property <bool> enabled <=> cb.checked;
    in property <float> progress <=> pb.progress;
    
    VerticalLayout {
        padding: 16px;
        spacing: 8px;

        HorizontalLayout {
            Text {
                text: "Light Intensity";
                font-size: Theme.textSize.defaut;
                color: Theme.palette.text-primary;
            }

            cb := CheckBox { checked: true; }
        }

        Rectangle {}

        pb := ProgressBar {
            progress: 0.15;
            opacity: root.enabled ? 1 : 0.7;
        }

        Text {
            text: "\{Math.floor(pb.progress * 100)} %";
            font-size: Theme.textSize.defaut;
            color: Theme.palette.text-primary;
            horizontal-alignment: right;
            opacity: root.enabled ? 1 : 0.7;
        }

        Rectangle {}
    }
}